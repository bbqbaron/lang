(defmodule examples.option)

(deftype (Option T)
  (| [:none Unit]
     [:some T]))

; (-> (Option String) String)
; (defn foo
;   [option]
;   (match option
;     ([:none _] "foo")
;     ([:some n] n)))

; (∀ T (-> (Option T) T T))
(defn default
  [option fallback]
  (match option
    ([:none _] fallback)
    ([:some value] value)))

; (∀ T (-> T (Option T) T))
(defn flip-default
  [fallback option]
  (match option
    ([:none _] fallback)
    ([:some value] value)))

; TODO: implement `flip-default` using `flip`
; (∀ X Y Z (-> (-> X Y Z) (-> Y X Z)))
(defn flip
  [f]
  (fn [x y] (f y x)))

(def flip-default*
  (flip default))

(defn main []
  (println (flip-default* "foo" [:some "bar"])))
