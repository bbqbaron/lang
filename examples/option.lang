(defmodule examples.option)

(deftype (Option T)
  (| [:none]
     [:some T]))

; (-> (Option String) String)
(defn foo
  [option]
  (match option
    [:none] "foo"
    [:some n] n))

; (∀ T (-> (Option T) T T))
(defn default
  [option fallback]
  (match option
    [:none] fallback
    [:some value] value))

; (∀ T (-> T (Option T) T))
(defn flip-default
  [fallback option]
  (match option
    [:none] fallback
    [:some value] value))

; TODO: implement `flip-default` using `flip`
; (∀ X Y Z (-> (-> X Y Z) (-> Y X Z)))
(defn flip
  [f]
  (fn [x y] (f y x)))

(def flip-default*
  (flip default))

(defn println
  [s : String]
  (. java.lang.System/out (java.io.PrintStream/println s)))

(def val [:some "shiiiit"])

(defn apply
  [f x]
  (f x))

(defn main
  [argv : [String]]
  (println (default ((fn [x] x) val) "fuck")))
