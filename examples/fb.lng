(defmodule foo.fb)

(defn void []
  nil)

(defn main 
  [& args]
  (->> args
       head
       (option/fallback (println "error") fizzbuzz)))

(defn fizzbuzz 
  [n]
  (let [[fizz-n 3]
        [buzz-n 5]]
    (if (not (= n 0))
      (do (match [(mod n fizz-n) (mod n buzz-n)]
            ([0 0] (println "fizzbuzz!"))
            ([0 _] (println "fizz"))
            ([_ 0] (println "buzz"))
            (_ (-> n show println)))
          (recur (dec n)))
      (pure ()))))

;; Local Variables:
;; mode: lisp
;; End:
